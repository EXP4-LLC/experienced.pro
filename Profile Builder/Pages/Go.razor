@page "/go/{userRoute}"
@page "/go/{userRoute}/{relativeRoutePath}"
@layout GoLayout
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Routing page...</PageTitle>

@if (user == null)
{
    // + If this doesn't load quickly there is likely an error. Should do a timeout.
    <div class="container-fluid d-flex flex-column align-middle justify-content-center min-vh-100 min-vw-100 bg-white text-center">
        <div class="text-center"><img src="images/experienced-pro-500x500.png" height="250" /></div>
        <div class="h1 p-5 text-center" style="font-family: Montserrat, sans-serif; font-weight: 500;">
            <strong>Looking for @userRoute...</strong>
        </div>
    </div>
}
else if (relativeRoutePath == null || (relativeRoutePath != null && routedLink == null))
{
    // + Display all links for user.
    <h3>@user.FullName's Pro Portal</h3>

    <div class="card-group">
    @foreach (var userLink in userLinks)
    {
        <div class="card">
            <figure class="card-img-top bg-dark text-light">
                <p style="font-size:4rem; text-align:center; vertical-align: middle;">@((MarkupString)userLink.GetLinkTypeIcon())</p>
            </figure>
            <div class="card-body">
                <h5 class="card-title">@userLink.Name</h5>
                <p class="card-text">@userLink.Description</p>
            </div>
            <div class="card-footer">
                <a href="@userLink.RedirectToUrl" class="btn btn-primary">View</a>
            </div>
        </div>
    }
    </div>
}
else
{
    NavManager.NavigateTo(routedLink.RedirectToUrl);
}

@code {
    [Parameter] public string? userRoute { get; set; }
    [Parameter] public string? relativeRoutePath { get; set; }

    private SharedClasses.Entities.User? user;
    private SharedClasses.Entities.RoutedLink[]? userLinks;
    private SharedClasses.Entities.RoutedLink? routedLink;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = (await Http.GetFromJsonAsync<SharedClasses.Entities.User[]>("sample-data/users.json"))
                .Where(u => u.UserRoutePath.ToLower().Trim() == userRoute.ToLower().Trim())
                .Select(u => u).First();            
        } catch
        {
            user = null;
        }

        if (user != null)
        {
            try
            {
                userLinks = (await Http.GetFromJsonAsync<SharedClasses.Entities.RoutedLink[]>("sample-data/routedlinks.json"))
                    .Where(r => r.AssociatedUserId == user.UserId)
                    .ToArray();
            } catch
            {
                userLinks = null;
            }
        }

        if (relativeRoutePath != null) 
        {
            try {
                routedLink = userLinks
                    .Where(r => r.RelativeRoutePath == relativeRoutePath && r.AssociatedUserId == user.UserId)
                    .First();
            } catch
            {
                routedLink = null;
            }
        }
    }
}
